#include "services_microboone.fcl"
process_name: HSNGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService:           { fileName: "hsn_hist.root" }
  TimeTracker:            {}
  RandomNumberGenerator:  {} #ART native random number generator
                          @table::microboone_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin:  { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:        10          # Number of events to create
  firstRun:         1           # Run number to use for this file
  firstEvent:       1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  producers:
  {
    generator:
    {
      module_type:        "HSNGen"
      PrintHepEvt:        true
      SterileMass:        0
      DecayChannel:       0
      FluxFile:           "none"
      Distance:           470.
      GlobalTimeOffset:   3125.
      BeamWindow:         1600.
      BoundariesX:        [0,500]
      BoundariesY:        [0,500]
      BoundariesZ:        [0,500]
    }

    rns: { module_type: "RandomNumberSaver" }
  }

  #define the producer and filter modules for this path, order matters, 
  #filters reject all following items.  see lines starting physics.producers below 
  simulate: [ generator, rns] 

  #define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]

  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [simulate] 

  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "hsn_gen.root" #default file name, can override from command line with -o or --output
 }
}

physics.producers.generator.DecayChannel:   1
physics.producers.generator.SterileMass:    0.150
physics.producers.generator.FluxFile:       "sterileFlux_m0.150.dat"

# Suggetion by Brandon to get rid of the database issue (not actually used by this module!)
services.PmtGainService.PmtGainProvider.UseDB: false

